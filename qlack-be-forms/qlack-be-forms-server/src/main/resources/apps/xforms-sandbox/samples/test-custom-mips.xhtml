<!--
    Copyright (C) 2008 Orbeon, Inc.

    This program is free software; you can redistribute it and/or modify it under the terms of the
    GNU Lesser General Public License as published by the Free Software Foundation; either version
    2.1 of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
    without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Lesser General Public License for more details.

    The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
-->
<xh:html xmlns:xf="http://www.w3.org/2002/xforms"
            xmlns:f="http://orbeon.org/oxf/xml/formatting"
            xmlns:xh="http://www.w3.org/1999/xhtml"
            xmlns:xxf="http://orbeon.org/oxf/xml/xforms"
            xmlns:widget="http://orbeon.org/oxf/xml/widget"
            xmlns:ev="http://www.w3.org/2001/xml-events"
            xmlns:xs="http://www.w3.org/2001/XMLSchema"
            xmlns:foo="http://orbeon.org/oxf/xml/foo">

    <xh:head>
        <xh:title>Custom MIPs</xh:title>
        <xf:model>
            <xf:instance>
                <states>
                    <state abbreviation="AK" name="Alaska"/>
                    <state abbreviation="AL" name="Alabama"/>
                    <state abbreviation="AR" name="Arkansas"/>
                    <state abbreviation="AZ" name="Arizona"/>
                    <state abbreviation="CA" name="California"/>
                    <state abbreviation="CO" name="Colorado"/>
                    <state abbreviation="CT" name="Connecticut"/>
                    <state abbreviation="DC" name="District of Columbia"/>
                    <state abbreviation="DE" name="Delaware"/>
                    <state abbreviation="FL" name="Florida"/>
                    <state abbreviation="GA" name="Georgia"/>
                    <state abbreviation="HI" name="Hawaii"/>
                    <state abbreviation="IA" name="Iowa"/>
                    <state abbreviation="ID" name="Idaho"/>
                    <state abbreviation="IL" name="Illinois"/>
                    <state abbreviation="IN" name="Indiana"/>
                    <state abbreviation="KS" name="Kansas"/>
                    <state abbreviation="KY" name="Kentucky"/>
                    <state abbreviation="LA" name="Louisiana"/>
                    <state abbreviation="MA" name="Massachusetts"/>
                    <state abbreviation="MD" name="Maryland"/>
                    <state abbreviation="ME" name="Maine"/>
                    <state abbreviation="MI" name="Michigan"/>
                    <state abbreviation="MN" name="Minnesota"/>
                    <state abbreviation="MO" name="Missouri"/>
                    <state abbreviation="MS" name="Mississippi"/>
                    <state abbreviation="MT" name="Montana"/>
                    <state abbreviation="NC" name="North Carolina"/>
                    <state abbreviation="ND" name="North Dakota"/>
                    <state abbreviation="NE" name="Nebraska"/>
                    <state abbreviation="NH" name="New Hampshire"/>
                    <!-- Commented on purpose for unit test -->
                    <!--<state abbreviation="NJ" name="New Jersey"/>-->
                    <state abbreviation="NM" name="New Mexico"/>
                    <state abbreviation="NV" name="Nevada"/>
                    <state abbreviation="NY" name="New York"/>
                    <state abbreviation="OH" name="Ohio"/>
                    <state abbreviation="OK" name="Oklahoma"/>
                    <state abbreviation="OR" name="Oregon"/>
                    <state abbreviation="PA" name="Pennsylvania"/>
                    <state abbreviation="PR" name="Puerto Rico"/>
                    <state abbreviation="RI" name="Rhode Island"/>
                    <state abbreviation="SC" name="South Carolina"/>
                    <state abbreviation="SD" name="South Dakota"/>
                    <state abbreviation="TN" name="Tennessee"/>
                    <state abbreviation="TX" name="Texas"/>
                    <state abbreviation="UT" name="Utah"/>
                    <state abbreviation="VA" name="Virginia"/>
                    <state abbreviation="VT" name="Vermont"/>
                    <state abbreviation="WA" name="Washington"/>
                    <state abbreviation="WI" name="Wisconsin"/>
                    <state abbreviation="WV" name="West Virginia"/>
                    <!-- Commented on purpose for unit test -->
                    <!--<state abbreviation="WY" name="Wyoming"/>-->
                </states>
            </xf:instance>
            <xf:bind ref="*/@name" foo:bar="if (starts-with(., 'N')) then 'is-n' else 'is-not-n'"/>
        </xf:model>
        <xh:link type="text/css" rel="stylesheet" href="/ops/yui/logger/assets/logger.css"/>
        <xh:script type="text/javascript" src="/ops/yui/logger/logger.js"/>
        <xh:script type="text/javascript" src="/ops/yui/event-simulate/event-simulate.js"/>
        <xh:script type="text/javascript" src="/ops/yui/yuitest/yuitest.js"/>
        <xh:script type="text/javascript">
            <![CDATA[
                YAHOO.tool.TestRunner.add(new YAHOO.tool.TestCase({

                    name: "Custom MIPs",

                    testInsertWyoming: function() {
                        var trigger = document.getElementById("insert-1-button");
                        ORBEON.util.Test.executeCausingAjaxRequest(this, function() {
                            YAHOO.util.UserAction.click(trigger);
                        }, function() {
                            var output = document.getElementById("name-output⊙51");
                            YAHOO.util.Assert.isNotNull(output);
                            YAHOO.util.Assert.areEqual("Wyoming", ORBEON.xforms.Controls.getCurrentValue(output));
                            YAHOO.util.Assert.isTrue(YAHOO.util.Dom.hasClass(output, "foo-bar-is-not-n"));
                        });
                    },

                    testInsertNewJersey: function() {
                        var trigger = document.getElementById("insert-2-button");
                        ORBEON.util.Test.executeCausingAjaxRequest(this, function() {
                            YAHOO.util.UserAction.click(trigger);
                        }, function() {
                            var output = document.getElementById("name-output⊙32");
                            YAHOO.util.Assert.areEqual("New Jersey", ORBEON.xforms.Controls.getCurrentValue(output));
                            YAHOO.util.Assert.isTrue(YAHOO.util.Dom.hasClass(output, "foo-bar-is-n"));
                        });
                    }
                }));
                ORBEON.xforms.Events.orbeonLoadedEvent.subscribe(function() {
                    if (parent && parent.TestManager) {
                        parent.TestManager.load();
                    } else {
                        new YAHOO.tool.TestLogger();
                        YAHOO.tool.TestRunner.run();
                    }
                });
            ]]>
        </xh:script>
        <xh:style type="text/css">
            .zebra-table { border-collapse: collapse; border: 1px solid gray; width: 20em }
            .zebra-table th { background-color: lightgray; color: black }
            .xforms-label { display: block }

            .foo-bar-is-n { background-color: #ccc }
            .foo-bar-is-not-n { background-color: yellow }
        </xh:style>
    </xh:head>
    <xh:body>
        <xh:table class="zebra-table">
            <xh:thead>
                <xh:tr>
                    <xh:th>Position</xh:th>
                    <xh:th>State</xh:th>
                </xh:tr>
            </xh:thead>
            <xh:tbody>
                <xf:repeat ref="*">
                    <xh:tr>
                        <xh:td>
                            <xf:output value="position()"/>
                        </xh:td>
                        <xh:td>
                            <xf:output id="name-output" ref="@name"/>
                        </xh:td>
                    </xh:tr>
                </xf:repeat>
            </xh:tbody>
        </xh:table>
        <xh:hr/>
        <xf:trigger id="insert-1-button">
            <xf:label>Insert Wyoming (for unit test)</xf:label>
            <xf:action ev:event="DOMActivate">
                <xf:insert ref="*"
                               origin="xf:element('state',
                                            (xf:attribute('abbreviation', 'WY'),
                                                xf:attribute('name', 'Wyoming')))"/>
            </xf:action>
        </xf:trigger>
        <xf:trigger id="insert-2-button">
            <xf:label>Insert New Jersey (for unit test)</xf:label>
            <xf:action ev:event="DOMActivate">
                <xf:insert ref="state[@abbreviation = 'NH']"
                               origin="xf:element('state',
                                            (xf:attribute('abbreviation', 'NJ'),
                                                xf:attribute('name', 'New Jersey')))"/>
            </xf:action>
        </xf:trigger>
    </xh:body>
</xh:html>
