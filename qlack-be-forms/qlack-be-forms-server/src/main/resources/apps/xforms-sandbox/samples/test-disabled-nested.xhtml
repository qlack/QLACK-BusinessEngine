<xh:html xmlns:xf="http://www.w3.org/2002/xforms"
    xmlns:f="http://orbeon.org/oxf/xml/formatting" xmlns:xh="http://www.w3.org/1999/xhtml"
    xmlns:xxf="http://orbeon.org/oxf/xml/xforms" xmlns:widget="http://orbeon.org/oxf/xml/widget"
    xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xbl="http://www.w3.org/ns/xbl" xmlns:xxbl="http://orbeon.org/oxf/xml/xbl"
    xmlns:fr="http://orbeon.org/oxf/xml/form-runner">

    <xh:head>
        <xh:title>Nested disabled</xh:title>
        <xh:link type="text/css" rel="stylesheet" href="/ops/yui/logger/assets/logger.css"/>
        <xh:script type="text/javascript" src="/ops/yui/logger/logger.js"/>
        <xh:script type="text/javascript" src="/ops/yui/event-simulate/event-simulate.js"/>
        <xh:script type="text/javascript" src="/ops/yui/yuitest/yuitest.js"/>
        <xh:script type="text/javascript">
            <![CDATA[
            YAHOO.tool.TestRunner.add(new YAHOO.tool.TestCase({

                name: "Nested disabled",

                /**
                 * For both groups and cases, when not shown, any form field inside the group or case should
                 * have the disabled attribute set, so it can't be reached by tabbing.
                 */
                testDisabledOnInputs: function() {
                    var YA = YAHOO.util.Assert;
                    var YD = YAHOO.util.Dom;
                    var OD = ORBEON.util.Dom;
                    var testCase = this;
                    var visibleButton = OD.get("toggle-outer").getElementsByTagName("button")[0];

                    /**
                     * Assert that inputs in the groups/cases have the disabled attribute set or not set, as specified
                     * by the attributes.
                     */
                    function assertInputDisabled(outerDisabled, innerDisabled, continuation) {

                        /**
                         * Checks that a given form control (input, button) inside a control is able or not to get the focus.
                         */
                        function assertCanGetFocus(expectedDisabled, control, tagName, continuation) {
                            // Set focus on the button at the top of the page
                            visibleButton.focus();
                            testCase.wait(function() {
                                // Try setting the focus on the input or button
                                var formElement = control.tagName.toLowerCase() == tagName ? control : control.getElementsByTagName(tagName)[0];
                                try { formElement.focus(); } catch (e) { /* On IE if focus can't be set */ }
                                testCase.wait(function() {
                                    // Check if the input got the focus
                                    var formControlGotFocus = ORBEON.xforms.Globals.currentFocusControlId == control.id;
                                    var message = control.id + " has not expected disabled state";
                                    YA.areEqual(! expectedDisabled, formControlGotFocus, message);
                                    continuation();
                                }, 0);
                            }, 0);
                        }

                        function assertInputWorker(expectedDisabled, groupOrCaseOrRepeat, innerOrOuter, index, continuation) {
                            var inputControlId = groupOrCaseOrRepeat + "-" + innerOrOuter + "-input" + index;
                            var control = OD.get(inputControlId);
                            if (control == null) {
                                YA.isTrue(expectedDisabled, "can't find input id " + inputControlId + " (should be there as it is expected to be relevant)");
                                continuation();
                            } else {
                                assertCanGetFocus(expectedDisabled, control, "input", continuation);
                            }
                        }

                        function assertButtonWorker(expectedDisabled, id, continuation) {
                            var buttonControl = OD.get(id);
                            if (buttonControl == null) {
                                YA.isTrue(expectedDisabled, "can't find button id " + id + " (should be there as it is expected to be relevant)");
                                continuation();
                            } else {
                                var triggerControl = YD.getElementsByClassName("xforms-trigger", null, buttonControl)[0];
                                assertCanGetFocus(expectedDisabled, triggerControl, "button", continuation);
                            }
                        }

                        var tests = [
                            _.bind(assertInputWorker, this, outerDisabled, "group-nested", "outer", "-1"),
                            _.bind(assertInputWorker, this, outerDisabled, "group-nested", "outer", "-2"),
                            _.bind(assertInputWorker, this, innerDisabled, "group-nested", "inner", ""),
                            _.bind(assertInputWorker, this, outerDisabled, "repeat-iteration", "outer", "-1" + XF_REPEAT_SEPARATOR + "1"),
                            _.bind(assertInputWorker, this, outerDisabled, "repeat-iteration", "outer", "-2" + XF_REPEAT_SEPARATOR + "1"),
                            _.bind(assertInputWorker, this, innerDisabled, "repeat-iteration", "inner", XF_REPEAT_SEPARATOR + "1-1"),
                            _.bind(assertInputWorker, this, outerDisabled, "repeat-repeat", "outer", "-1" + XF_REPEAT_SEPARATOR + "1"),
                            _.bind(assertInputWorker, this, outerDisabled, "repeat-repeat", "outer", "-2" + XF_REPEAT_SEPARATOR + "1"),
                            _.bind(assertInputWorker, this, innerDisabled, "repeat-repeat", "inner", XF_REPEAT_SEPARATOR + "1-1"),
                            _.bind(assertInputWorker, this, outerDisabled, "case", "outer", "-1"),
                            _.bind(assertInputWorker, this, outerDisabled, "case", "outer", "-2"),
                            _.bind(assertInputWorker, this, innerDisabled, "case", "inner", ""),
                            _.bind(assertButtonWorker, this, outerDisabled, "group-nested-outer-button"),
                            _.bind(assertButtonWorker, this, outerDisabled, "group-flat-outer-button"),
                            _.bind(assertButtonWorker, this, outerDisabled, "repeat-iteration-outer-button" + XF_REPEAT_SEPARATOR + "1"),
                            _.bind(assertButtonWorker, this, outerDisabled, "repeat-repeat-outer-button" + XF_REPEAT_SEPARATOR + "1"),
                            _.bind(assertButtonWorker, this, outerDisabled, "case-outer-button")
                        ];

                        function runTests() {
                            if (tests.length != 0) {
                                var currentTest = tests.shift();
                                currentTest(runTests);
                            } else {
                                continuation();
                            }
                        }

                        runTests();
                    }

                    var testsTuples = [
                        // Enable just outer
                        function() {
                            YAHOO.util.UserAction.click(document.getElementById("toggle-outer").getElementsByTagName("button")[0]);
                        },
                        // Inputs in outer should be enabled and input in inner should still be disabled
                        _.bind(assertInputDisabled, this, false, true),
                        // Enable inner
                        function() {
                            YAHOO.util.UserAction.click(document.getElementById("toggle-inner").getElementsByTagName("button")[0]);
                        },
                        // Now everything is enabled (that is pretty simple)
                        _.bind(assertInputDisabled, this, false, false),
                        // Get back to the initial state where outer and inner are disabled
                        function() {
                            YAHOO.util.UserAction.click(document.getElementById("toggle-outer").getElementsByTagName("button")[0]);
                            YAHOO.util.UserAction.click(document.getElementById("toggle-inner").getElementsByTagName("button")[0]);
                        },
                        // Nothing to test
                        function(continuation) {
                            continuation();
                        }
                    ];

                    function runTuples() {
                        if (testsTuples.length != 0) {
                            // One more Ajax/test tuple to run
                            var causingAjax = testsTuples.shift();
                            var testContinuation = testsTuples.shift();
                            ORBEON.util.Test.executeCausingAjaxRequest(testCase, causingAjax, _.bind(testContinuation, this, runTuples));
                        }
                    }

                    // Initial state: everything is disabled, then start changing state
                    assertInputDisabled(true, true, runTuples);
                },

                /**
                 * When a YUI button is built from a disabled button, YUI creates a disabled button. If the button is
                 * in a non-selected case, we need to make sure the YUI button is enabled when the case becomes
                 * selected.
                 */
                testDisabledOnYUIButton: function() {

                    function assertButtonDisabled(groupOrCase) {
                        var yuiButton = YAHOO.util.Dom.getElementsByClassName("yui-button", null, groupOrCase + "-outer-button")[0];
                        YAHOO.util.Assert.isFalse(YAHOO.util.Dom.hasClass(yuiButton, "yui-button-disabled"), "yui button in " + groupOrCase + " must not be disabled");
                    }

                    ORBEON.util.Test.executeSequenceCausingAjaxRequest(this, [
                        [
                            // Enable outer so button becomes visible
                            function() {
                                YAHOO.util.UserAction.click(document.getElementById("toggle-outer").getElementsByTagName("button")[0]);
                            },
                            // Buttons must not be disabled
                            function() {
                                assertButtonDisabled("group");
                                assertButtonDisabled("case");
                            }
                        ],
                        [
                            // Get back to the initial state where outer and inner are disabled
                            function() {
                                YAHOO.util.UserAction.click(document.getElementById("toggle-outer").getElementsByTagName("button")[0]);
                            },
                            function() {
                            }
                        ]
                    ]);
                }
            }));

            ORBEON.xforms.Events.orbeonLoadedEvent.subscribe(function() {
                if (parent && parent.TestManager) {
                    parent.TestManager.load();
                } else {
                    new YAHOO.tool.TestLogger();
                    YAHOO.tool.TestRunner.run();
                }
            });
            ]]>
        </xh:script>
        <xh:style type="text/css">
            .xforms-label { width: 11em; display: inline-block; text-align: right; padding-right: 1em }
        </xh:style>
        <xf:model xmlns:xf="http://www.w3.org/2002/xforms">
            <xf:instance>
                <instance>
                    <enabled section="outer">false</enabled>
                    <enabled section="inner">false</enabled>
                    <input/>
                </instance>
            </xf:instance>
            <xf:bind ref="enabled" relevant=". = 'true'"/>
        </xf:model>
    </xh:head>
    <xh:body>
        <xh:fieldset>
            <xh:legend>Actions</xh:legend>
            <xf:group>
                <xf:action ev:event="DOMActivate">
                    <xf:var name="enabled" value="enabled[@section = (if(event('xxf:targetid') = 'toggle-outer') then 'outer' else 'inner')]"/>
                    <xf:setvalue ref="$enabled" value="if (. = 'true') then 'false' else 'true'"/>
                    <xf:toggle case="{$enabled/@section}-{if ($enabled = 'true') then 'enabled' else 'disabled'}"/>
                </xf:action>
                <xf:trigger id="toggle-outer">
                    <xf:label>Toggle outer</xf:label>
                </xf:trigger>
                <xf:trigger id="toggle-inner">
                    <xf:label>Toggle inner</xf:label>
                </xf:trigger>
            </xf:group>
        </xh:fieldset>
        <xh:fieldset>
            <xh:legend>Groups nested</xh:legend>
            <xf:group ref=".[enabled[@section = 'outer'] = 'true']" id="outer-group-nested">
                <xf:input ref="input" id="group-nested-outer-input-1">
                    <xf:label>Group nested outer 1</xf:label>
                </xf:input>
                <xf:group ref=".[enabled[@section = 'inner'] = 'true']" id="inner-group-nested">
                    <xf:input ref="input" id="group-nested-inner-input">
                        <xf:label>Group nested inner</xf:label>
                    </xf:input>
                </xf:group>
                <xf:input ref="input" id="group-nested-outer-input-2">
                    <xf:label>Group nested outer 2</xf:label>
                </xf:input>
                <xf:trigger id="group-nested-outer-button">
                    <xf:label>Button</xf:label>
                </xf:trigger>
            </xf:group>
        </xh:fieldset>
        <xh:fieldset>
            <xh:legend>Groups flat</xh:legend>
            <xh:table>
                <xh:tr>
                    <xf:group ref=".[enabled[@section = 'outer'] = 'true']" id="outer-group-flat">
                        <xh:td>
                            <xf:input ref="input" id="group-flat-outer-input-1">
                                <xf:label>Group flat outer 1</xf:label>
                            </xf:input>
                        </xh:td>
                        <xf:group ref=".[enabled[@section = 'inner'] = 'true']" id="inner-group-flat">
                            <xh:td>
                                <xf:input ref="input" id="group-flat-inner-input">
                                    <xf:label>Group flat inner</xf:label>
                                </xf:input>
                            </xh:td>
                        </xf:group>
                        <xh:td>
                            <xf:input ref="input" id="group-flat-outer-input-2">
                                <xf:label>Group flat outer 2</xf:label>
                            </xf:input>
                        </xh:td>
                        <xh:td>
                            <xf:trigger id="group-flat-outer-button">
                                <xf:label>Button</xf:label>
                            </xf:trigger>
                        </xh:td>
                    </xf:group>
                </xh:tr>
            </xh:table>
        </xh:fieldset>
        <xh:fieldset>
            <xh:legend>Repeats (iteration relevance)</xh:legend>
            <xf:repeat ref="instance()/enabled[@section = 'outer']" id="outer-repeat-iteration">
                <xf:input ref="instance()/input" id="repeat-iteration-outer-input-1">
                    <xf:label>Repeat iteration outer 1</xf:label>
                </xf:input>
                <xf:repeat ref="instance()/enabled[@section = 'inner']" id="inner-repeat-iteration">
                    <xf:input ref="instance()/input" id="repeat-iteration-inner-input">
                        <xf:label>Repeat iteration inner</xf:label>
                    </xf:input>
                </xf:repeat>
                <xf:input ref="instance()/input" id="repeat-iteration-outer-input-2">
                    <xf:label>Repeat iteration outer 2</xf:label>
                </xf:input>
                <xf:trigger id="repeat-iteration-outer-button">
                    <xf:label>Button</xf:label>
                </xf:trigger>
            </xf:repeat>
        </xh:fieldset>
        <xh:fieldset>
            <xh:legend>Repeats (repeat relevance)</xh:legend>
            <xf:repeat ref="instance()[enabled[@section = 'outer'] = 'true']" id="outer-repeat-repeat">
                <xf:input ref="instance()/input" id="repeat-repeat-outer-input-1">
                    <xf:label>Repeat repeat outer 1</xf:label>
                </xf:input>
                <xf:repeat ref="instance()[enabled[@section = 'inner'] = 'true']" id="inner-repeat-repeat">
                    <xf:input ref="instance()/input" id="repeat-repeat-inner-input">
                        <xf:label>Repeat repeat inner</xf:label>
                    </xf:input>
                </xf:repeat>
                <xf:input ref="instance()/input" id="repeat-repeat-outer-input-2">
                    <xf:label>Repeat repeat outer 2</xf:label>
                </xf:input>
                <xf:trigger id="repeat-repeat-outer-button">
                    <xf:label>Button</xf:label>
                </xf:trigger>
            </xf:repeat>
        </xh:fieldset>
        <xh:fieldset>
            <xh:legend>Cases</xh:legend>
            <xf:switch>
                <xf:case id="outer-disabled"/>
                <xf:case id="outer-enabled">
                    <xf:input ref="input" id="case-outer-input-1">
                        <xf:label>Case outer 1</xf:label>
                    </xf:input>
                    <xf:switch>
                        <xf:case id="inner-disabled"/>
                        <xf:case id="inner-enabled">
                            <xf:input ref="input" id="case-inner-input">
                                <xf:label>Case inner</xf:label>
                            </xf:input>
                        </xf:case>
                    </xf:switch>
                    <xf:input ref="input" id="case-outer-input-2">
                        <xf:label>Case outer 2</xf:label>
                    </xf:input>
                    <xf:trigger id="case-outer-button">
                        <xf:label>Button</xf:label>
                    </xf:trigger>
                </xf:case>
            </xf:switch>
        </xh:fieldset>
    </xh:body>
</xh:html>
