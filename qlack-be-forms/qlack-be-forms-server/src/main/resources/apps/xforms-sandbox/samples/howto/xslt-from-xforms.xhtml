<xh:html xmlns:xf="http://www.w3.org/2002/xforms"
    xmlns:f="http://orbeon.org/oxf/xml/formatting"
    xmlns:xh="http://www.w3.org/1999/xhtml"
    xmlns:xxf="http://orbeon.org/oxf/xml/xforms"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:saxon="http://saxon.sf.net/"
    xmlns:ev="http://www.w3.org/2001/xml-events"
    xmlns:xs="http://www.w3.org/2001/XMLSchema">

    <xh:head>
        <xh:title>XSLT Transformation in XForms</xh:title>
        <xf:model>
            
            <!-- Instance to be transformed through XSLT -->
            <xf:instance id="input" xxf:exclude-result-prefixes="#all">
                <sites>
                    <site>
                        <name>Yahoo!</name>
                        <tag>search</tag>
                        <tag>portal</tag>
                        <tag>mail</tag>
                    </site>
                    <site>
                        <name>Google</name>
                        <tag>search</tag>
                        <tag>mail</tag>
                    </site>
                </sites>
            </xf:instance>
            
            <!-- Instance containing the output of the transformation -->
            <xf:instance id="output"><dummy/></xf:instance>

            <!-- The stylesheet doing the transformation; here is inline, but it will typically be an external file -->
            <xf:instance id="stylesheet">
                <xsl:stylesheet version="2.0" exclude-result-prefixes="#all">
                    <xsl:template match="site">
                        <xsl:copy>
                            <xsl:apply-templates select="node() except tag"/>
                            <tags>
                                <xsl:value-of select="string-join(tag, ' ')"/>
                            </tags>
                        </xsl:copy>
                    </xsl:template>
                    <xsl:template match="@*|node()" priority="-100">
                        <xsl:copy>
                            <xsl:apply-templates select="@*|node()"/>
                        </xsl:copy>
                    </xsl:template>
                </xsl:stylesheet>
            </xf:instance>
            
            <xf:instance id="ui">
                <ui>
                    <xsl:output method="xml" omit-xml-declaration="yes" indent="no" saxon:indent-spaces="4"/>
                </ui>
            </xf:instance>
            <xf:delete ev:event="xforms-model-construct-done" ref="instance('input')//text()[normalize-space() = '']"/>
            
        </xf:model>
        <xh:style type="text/css">
            pre { background-color: #eee; font-family: Consolas,Monaco,Lucida Console,Liberation Mono,DejaVu Sans Mono,Bitstream Vera Sans Mono,Courier New; 
                  float: left; padding: .5em 2em; }
            .transform-trigger { float: left; margin: 5em 2em;  }
        </xh:style>
    </xh:head>
    <xh:body>

        <xh:pre><xf:output value="saxon:serialize(instance('input'), instance('ui')/xsl:output)"/></xh:pre>
        
        <xf:trigger appearance="minimal" class="transform-trigger">
            <xf:label>Run XSLT</xf:label>
            <xf:action ev:event="DOMActivate">
                <xf:insert ref="instance('output')" origin="saxon:transform(
                    saxon:compile-stylesheet(instance('stylesheet')/root()), 
                    saxon:parse(saxon:serialize(instance('input'), 'xml')))"/>
                <xf:toggle case="show-result"/>
            </xf:action>
        </xf:trigger>
        
        <xf:switch>
            <xf:case/>
            <xf:case id="show-result">
                <xh:pre><xf:output value="saxon:serialize(instance('output'), instance('ui')/xsl:output)"/></xh:pre>
            </xf:case>
        </xf:switch>
    </xh:body>
</xh:html>
